version: '3.9'
services:
  app:
    container_name: app_container
    build:
      context: .
      target: ${ENVIRONMENT}
    ports:
      - 8080:8080
    depends_on:
      db:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./src/main/java
          target: /app/src/main/java
        - action: rebuild
          path: ./src/main/resources
        - action: rebuild
          path: ./build.gradle
  db:
    image: arm64v8/postgres:16.1-alpine
    command: -c 'config_file=/etc/postgresql/postgresql.conf'
    container_name: db_container
    tty: true
    volumes:
      - template-vol:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
      - ./db/sql/sample_data:/initdb
      - ./db/config/postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      SAMPLE_DATA: ${SAMPLE_DATA}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready --username=postgres']
      interval: 10s
      timeout: 5s
      retries: 5
  web:
    container_name: web_container
    build: ./web
    volumes:
      - type: bind
        source: ./web/src
        target: /app/src
      - type: volume
        source: web-source
        target: /app/dist
    environment:
      NODE_ENV: ${ENVIRONMENT}
    develop:
      watch:
        - action: rebuild
          path: ./web/package.json
  nginx:
    container_name: nginx_container
    build: ./nginx
    volumes:
      - type: volume
        source: web-source
        target: /app
    ports:
      - 3000:80
    depends_on:
      - web
volumes:
  template-vol:
  web-source:
