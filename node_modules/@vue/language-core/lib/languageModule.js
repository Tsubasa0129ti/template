"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVueLanguagePlugin = void 0;
const language_core_1 = require("@volar/language-core");
const plugins_1 = require("./plugins");
const ts_1 = require("./utils/ts");
const vueFile_1 = require("./virtualFile/vueFile");
const fileRegistries = [];
function getVueFileRegistry(key, plugins) {
    let fileRegistry = fileRegistries.find(r => r.key === key
        && r.plugins.length === plugins.length
        && r.plugins.every(plugin => plugins.includes(plugin)))?.files;
    if (!fileRegistry) {
        fileRegistry = new Map();
        fileRegistries.push({
            key: key,
            plugins: plugins,
            files: fileRegistry,
        });
    }
    return fileRegistry;
}
function getFileRegistryKey(compilerOptions, vueCompilerOptions, plugins, globalTypesHolder) {
    const values = [
        globalTypesHolder,
        ...Object.keys(vueCompilerOptions)
            .sort()
            .filter(key => key !== 'plugins')
            .map(key => [key, vueCompilerOptions[key]]),
        [...new Set(plugins.map(plugin => plugin.requiredCompilerOptions ?? []).flat())]
            .sort()
            .map(key => [key, compilerOptions[key]]),
    ];
    return JSON.stringify(values);
}
function createVueLanguagePlugin(ts, getFileName, compilerOptions = {}, _vueCompilerOptions = {}, codegenStack = false, globalTypesHolder) {
    const vueCompilerOptions = (0, ts_1.resolveVueCompilerOptions)(_vueCompilerOptions);
    const allowLanguageIds = new Set(['vue']);
    const pluginContext = (0, plugins_1.createPluginContext)(ts, compilerOptions, vueCompilerOptions, codegenStack, globalTypesHolder);
    const plugins = (0, plugins_1.getDefaultVueLanguagePlugins)(pluginContext);
    if (vueCompilerOptions.extensions.includes('.md')) {
        allowLanguageIds.add('markdown');
    }
    if (vueCompilerOptions.extensions.includes('.html')) {
        allowLanguageIds.add('html');
    }
    let generatedCodeRegistry;
    return {
        createVirtualCode(fileId, languageId, snapshot) {
            if (allowLanguageIds.has(languageId)) {
                const fileName = getFileName(fileId);
                if (!generatedCodeRegistry) {
                    pluginContext.globalTypesHolder ??= fileName;
                    generatedCodeRegistry = getVueFileRegistry(getFileRegistryKey(compilerOptions, vueCompilerOptions, plugins, pluginContext.globalTypesHolder), vueCompilerOptions.plugins);
                }
                if (generatedCodeRegistry.has(fileId)) {
                    const reusedResult = generatedCodeRegistry.get(fileId);
                    reusedResult.update(snapshot);
                    return reusedResult;
                }
                const vueFile = new vueFile_1.VueGeneratedCode(fileName, languageId, snapshot, vueCompilerOptions, plugins, ts, codegenStack);
                generatedCodeRegistry.set(fileId, vueFile);
                return vueFile;
            }
        },
        updateVirtualCode(_fileId, vueFile, snapshot) {
            vueFile.update(snapshot);
            return vueFile;
        },
        disposeVirtualCode(fileId, vueFile, files) {
            generatedCodeRegistry?.delete(fileId);
            if (vueFile.fileName === pluginContext.globalTypesHolder) {
                if (generatedCodeRegistry?.size) {
                    for (const [fileName, file] of generatedCodeRegistry) {
                        pluginContext.globalTypesHolder = fileName;
                        generatedCodeRegistry = getVueFileRegistry(getFileRegistryKey(compilerOptions, vueCompilerOptions, plugins, pluginContext.globalTypesHolder), vueCompilerOptions.plugins);
                        files?.set(fileId, file.languageId, 
                        // force dirty
                        { ...file.snapshot });
                        break;
                    }
                }
                else {
                    generatedCodeRegistry = undefined;
                    pluginContext.globalTypesHolder = undefined;
                }
            }
        },
        typescript: {
            extraFileExtensions: vueCompilerOptions.extensions.map(ext => ({
                extension: ext.slice(1),
                isMixedContent: true,
                scriptKind: 7,
            })),
            getScript(rootVirtualCode) {
                for (const code of (0, language_core_1.forEachEmbeddedCode)(rootVirtualCode)) {
                    if (code.id.startsWith('script_')) {
                        const lang = code.id.substring('script_'.length);
                        return {
                            code,
                            extension: '.' + lang,
                            scriptKind: lang === 'js' ? ts.ScriptKind.JS
                                : lang === 'jsx' ? ts.ScriptKind.JSX
                                    : lang === 'tsx' ? ts.ScriptKind.TSX
                                        : ts.ScriptKind.TS,
                        };
                    }
                }
            },
        },
    };
}
exports.createVueLanguagePlugin = createVueLanguagePlugin;
//# sourceMappingURL=languageModule.js.map