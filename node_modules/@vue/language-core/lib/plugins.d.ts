import * as CompilerDOM from '@vue/compiler-dom';
import type * as ts from 'typescript';
import { type VueCompilerOptions, type VueLanguagePlugin } from './types';
export declare function createPluginContext(ts: typeof import('typescript'), compilerOptions: ts.CompilerOptions, vueCompilerOptions: VueCompilerOptions, codegenStack: boolean, globalTypesHolder: string | undefined): {
    modules: {
        typescript: typeof import("typescript");
        '@vue/compiler-dom': typeof CompilerDOM;
    };
    compilerOptions: ts.CompilerOptions;
    vueCompilerOptions: VueCompilerOptions;
    codegenStack: boolean;
    globalTypesHolder: string | undefined;
};
export declare function getDefaultVueLanguagePlugins(pluginContext: Parameters<VueLanguagePlugin>[0]): {
    version: 2;
    name?: string | undefined;
    order?: number | undefined;
    requiredCompilerOptions?: string[] | undefined;
    parseSFC?(fileName: string, content: string): import("@vue/compiler-sfc").SFCParseResult | undefined;
    updateSFC?(oldResult: import("@vue/compiler-sfc").SFCParseResult, textChange: {
        start: number;
        end: number;
        newText: string;
    }): import("@vue/compiler-sfc").SFCParseResult | undefined;
    resolveTemplateCompilerOptions?(options: CompilerDOM.CompilerOptions): CompilerDOM.CompilerOptions;
    compileSFCTemplate?(lang: string, template: string, options: CompilerDOM.CompilerOptions): CompilerDOM.CodegenResult | undefined;
    updateSFCTemplate?(oldResult: CompilerDOM.CodegenResult, textChange: {
        start: number;
        end: number;
        newText: string;
    }): CompilerDOM.CodegenResult | undefined;
    getEmbeddedCodes?(fileName: string, sfc: import("./types").Sfc): {
        id: string;
        lang: string;
    }[];
    resolveEmbeddedCode?(fileName: string, sfc: import("./types").Sfc, embeddedFile: import("./virtualFile/embeddedFile").VueEmbeddedCode): void;
}[];
